#include <stdio.h>
#include <stdlib.h>

// Define the structure for an appointment
struct Appointment {
    char name[50];
    char date[20];
    char time[20];
    struct Appointment* next;
};

// Define a structure for the queue
struct Queue {
    struct Appointment* front;
    struct Appointment* rear;
};

// Function to initialize a queue
struct Queue* createQueue() {
    struct Queue* queue = (struct Queue*)malloc(sizeof(struct Queue));
    if (queue == NULL) {
        printf("Memory allocation failed. \n");
        exit(1);
    }
    queue->front = queue->rear = NULL;
    return queue;
}

// Function to create a new appointment
struct Appointment* createAppointment() {
    struct Appointment* newAppointment = (struct Appointment*)malloc(sizeof(struct Appointment));
    if (newAppointment == NULL) {
        printf("Memory allocation failed.\n");
        exit(1);
    }

    printf("Enter Name: ");
    scanf("%s", newAppointment->name);
    printf("Enter Date (MM/DD/YYYY): ");
    scanf("%s", newAppointment->date);
    printf("Enter Time: ");
    scanf("%s", newAppointment->time);

    newAppointment->next = NULL;
    return newAppointment;
}

// Function to enqueue an appointment
void enqueue(struct Queue* queue, struct Appointment* newAppointment) {
    if (queue->rear == NULL) {
        queue->front = queue->rear = newAppointment;
        return;
    }

    queue->rear->next = newAppointment;
    queue->rear = newAppointment;
}

// Function to display all appointments in the queue
void displayAppointments(struct Queue* queue) {
    if (queue->front == NULL) {
        printf("No appointments in the queue. \n");
        return;
    }

    struct Appointment* current = queue->front;
    printf("Appointments in the queue: \n");

    while (current != NULL) {
        printf("Name: %s\nDate: %s\nTime: %s\n\n", current->name, current->date, current->time);
        current = current->next;
    }
}

int main() {
    struct Queue* appointmentQueue = createQueue();
    int choice;

    while (1) {
        printf("\nAppointment Scheduling System\n");
        printf("1. Add Appointment\n");
        printf("2. Display Appointments\n");
        printf("3. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1: {
                struct Appointment* newAppointment = createAppointment();
                enqueue(appointmentQueue, newAppointment);
                printf("Appointment added to the queue. \n");
                break;
            }
            case 2: {
                displayAppointments(appointmentQueue);
                break;
            }
            case 3: {
                printf("Exiting the program. \n");
                exit(0);
            }
            default:
                printf("Invalid choice. Please try again. \n");
        }
    }

    return 0;
}
